# ******************************************************************
# Declare parameters
# ******************************************************************
parameters:
- name: TriggerManifest
  displayName: Trigger Manifest
  type: string
  default: ''
- name: TriggeredBy
  displayName: Triggered By
  type: string
  default: ''
- name: ApplicationScope
  displayName: Application Scope
  type: string
  default: ''
- name: ApplicationScopeWithTests
  displayName: Application Scope With Tests
  type: string
  default: ''
- name: ArtifactsBuildFolder
  displayName: Artifacts Build Folder
  type: string
  default: '$(Build.ArtifactStagingDirectory)'  # Default to a common artifact directory
- name: OSPackageVersion
  displayName: OS Package Version
  type: string
  default: '1.0.0'  # Replace with the desired default version

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      Write-Host "Creating $env:ArtifactsBuildFolder directory on $(System.DefaultWorkingDirectory)"
      mkdir $env:ArtifactsBuildFolder -Force
      Write-Host "ArtifactsBuildFolder: $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Create Artifacts Folder'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $osPackageVersion = "${{ parameters.OSPackageVersion }}"
      pip install -U outsystems-pipeline==$osPackageVersion
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Install OutSystems Pipeline Package'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      python -m outsystems.pipeline.fetch_lifetime_data --artifacts $env:ArtifactsBuildFolder --lt_url $(LifeTimeHostname) --lt_token $(LifeTimeServiceAccountToken) --lt_api_version $(LifeTimeAPIVersion)
      Write-Host "Fetched Lifetime Data to $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Fetch Lifetime Data'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      python -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts $env:ArtifactsBuildFolder --lt_url $(LifeTimeHostname) --lt_token $(LifeTimeServiceAccountToken) --lt_api_version $(LifeTimeAPIVersion) --source_env $(DevelopmentEnvironment) --destination_env $(RegressionEnvironment) --app_list "$(ApplicationScopeWithTests)"
      Write-Host "Deployed to CI Environment from $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Deploy to CI Environment'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      python -m outsystems.pipeline.generate_unit_testing_assembly --artifacts $env:ArtifactsBuildFolder --app_list "$(ApplicationScopeWithTests)" --cicd_probe_env $(ProbeEnvironmentURL) --bdd_framework_env $(BddEnvironmentURL)
      Write-Host "Generated URLs for BDD testing in $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Generate URLs for BDD testing'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      python -m outsystems.pipeline.evaluate_test_results --artifacts $env:ArtifactsBuildFolder
      Write-Host "Evaluated Test Results in $env:ArtifactsBuildFolder"
      exit 0
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Evaluate Test Results'
  continueOnError: true

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '$(ArtifactsBuildFolder)\junit-result.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      New-Item -Force -Path "$env:ArtifactsBuildFolder\deployment_data" -Name "ApplicationScope.cache" -ItemType "file" -Value "$(ApplicationScope)"
      Write-Host "Wrote ApplicationScope to $env:ArtifactsBuildFolder\deployment_data\ApplicationScope.cache"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Write ApplicationScope to File'
  continueOnError: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deployment_manifest'
  inputs:
    PathtoPublish: $(ArtifactsBuildFolder)\deployment_data
    ArtifactName: $(ArtifactName)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      Write-Host "Stashing the *.cache generated in the pipeline logs"
      $cache_files = Get-ChildItem -Path "$env:ArtifactsBuildFolder\*.cache" -Recurse
      foreach ($cfile in $cache_files) {
        Write-Host "Stashing $cfile"
        Write-Output "##vso[task.uploadfile]$cfile"
      }
    workingDirectory: $(System.DefaultWorkingDirectory)
    condition: always()
  displayName: 'Stash generated *.cache files into pipeline logs'
