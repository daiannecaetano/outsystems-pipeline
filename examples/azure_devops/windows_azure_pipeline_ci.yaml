# ******************************************************************
# Declare parameters
# ******************************************************************
parameters:
- name: TriggerManifest
  displayName: Trigger Manifest
  type: string
  default: ''
- name: TriggeredBy
  displayName: Triggered By
  type: string
  default: ''
- name: ApplicationScope
  displayName: Application Scope
  type: string
  default: ''
- name: ApplicationScopeWithTests
  displayName: Application Scope With Tests
  type: string
  default: ''
- name: ArtifactsBuildFolder
  displayName: Artifacts Build Folder
  type: string
  default: '$(Build.ArtifactStagingDirectory)'  # Default to a common artifact directory
- name: OSPackageVersion
  displayName: OS Package Version
  type: string
  default: '0.9.0'  # Use an available version
- name: LifeTimeHostname
  displayName: LifeTime Hostname
  type: string
  default: 'https://outsystems.lt.askblue.pt/'
- name: LifeTimeServiceAccountToken
  displayName: LifeTime Service Account Token
  type: string
  default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaWZldGltZSIsInN1YiI6Ik1HWTJPR1EyTnprdE5qSmpPQzAwT0RVNUxXRXlNRFV0TW1ZeE1EVXdaVEkxT0RVeSIsImF1ZCI6ImxpZmV0aW1lIiwiaWF0IjoiMTcxOTI1NTM2MiIsImppdCI6IkJ1WEMyV213cEQifQ==.hffnxY6A1sZFuCzqTszJIlUki/RLJDxLLVOhSM31ZIQ='
- name: LifeTimeAPIVersion
  displayName: LifeTime API Version
  type: string
  default: '2'
- name: DevelopmentEnvironment
  displayName: Development Environment
  type: string
  default: 'Development'
- name: RegressionEnvironment
  displayName: Regression Environment
  type: string
  default: 'QualityAssurance#1'
- name: ProbeEnvironmentURL
  displayName: Probe Environment URL
  type: string
  default: 'https://outsystems.dev.askblue.pt/'
#- name: BddEnvironmentURL
#  displayName: BDD Environment URL
#  type: string
# default: 'https://outsystems.qa.askblue.pt/'
- name: ArtifactName
  displayName: Artifact Name
  type: string
  default: 'deployment_manifest'
- name: ArtifactBuildFolder
  displayName: Artifact Build Folder
  type: string
  default: 'Artifacts'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Check if Python is installed
      $python = Get-Command python -ErrorAction SilentlyContinue
      if (-not $python) {
        Write-Host "Python not found. Downloading and installing Python..."
        Invoke-WebRequest -Uri https://www.python.org/ftp/python/3.9.7/python-3.9.7-amd64.exe -OutFile python-installer.exe
        Start-Process python-installer.exe -ArgumentList "/quiet InstallAllUsers=1 PrependPath=1" -Wait
        Remove-Item -Force python-installer.exe

        # Add Python to PATH
        $pythonPath = "C:\Python39"
        [System.Environment]::SetEnvironmentVariable('PATH', $env:PATH + ";$pythonPath", [System.EnvironmentVariableTarget]::Machine)
      } else {
        Write-Host "Python is already installed."
      }

      # Verify Python installation
      $pythonVersion = python --version
      if ($pythonVersion) {
        Write-Host "Python is installed and available: $pythonVersion"
      } else {
        Write-Error "Python is not installed or not available in the PATH."
        exit 1
      }
    displayName: 'Ensure Python is Installed'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      Write-Host "Creating $env:ArtifactsBuildFolder directory on $(System.DefaultWorkingDirectory)"
      mkdir $env:ArtifactsBuildFolder -Force
      Write-Host "ArtifactsBuildFolder: $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Create Artifacts Folder'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Update pip to the latest version
      python -m pip install --upgrade pip

      $osPackageVersion = "${{ parameters.OSPackageVersion }}"
      python -m pip install -U outsystems-pipeline==$osPackageVersion
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Install OutSystems Pipeline Package'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      $lt_url = "${{ parameters.LifeTimeHostname }}"
      $lt_token = "${{ parameters.LifeTimeServiceAccountToken }}"
      $lt_api_version = "${{ parameters.LifeTimeAPIVersion }}"
      python -m outsystems.pipeline.fetch_lifetime_data --artifacts $env:ArtifactsBuildFolder --lt_url $lt_url --lt_token $lt_token --lt_api_version $lt_api_version
      Write-Host "Fetched Lifetime Data to $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Fetch Lifetime Data'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      $lt_url = "${{ parameters.LifeTimeHostname }}"
      $lt_token = "${{ parameters.LifeTimeServiceAccountToken }}"
      $lt_api_version = "${{ parameters.LifeTimeAPIVersion }}"
      $source_env = "${{ parameters.DevelopmentEnvironment }}"
      $destination_env = "${{ parameters.RegressionEnvironment }}"
      $app_list = "${{ parameters.ApplicationScopeWithTests }}"
      python -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts $env:ArtifactsBuildFolder --lt_url $lt_url --lt_token $lt_token --lt_api_version $lt_api_version --source_env $source_env --destination_env $destination_env --app_list "$app_list"
      Write-Host "Deployed to CI Environment from $env:ArtifactsBuildFolder"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Deploy to CI Environment'

#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
#      $app_list = "${{ parameters.ApplicationScopeWithTests }}"
#      $cicd_probe_env = "${{ parameters.ProbeEnvironmentURL }}"
#      $bdd_framework_env = "${{ parameters.BddEnvironmentURL }}"
#      python -m outsystems.pipeline.generate_unit_testing_assembly --artifacts $env:ArtifactsBuildFolder --app_list "$app_list" --cicd_probe_env $cicd_probe_env --bdd_framework_env $bdd_framework_env
#      Write-Host "Generated URLs for BDD testing in $env:ArtifactsBuildFolder"
#    workingDirectory: $(System.DefaultWorkingDirectory)
#  displayName: 'Generate URLs for BDD testing'

#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
#      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
#      python -m outsystems.pipeline.evaluate_test_results --artifacts $env:ArtifactsBuildFolder
#      Write-Host "Evaluated Test Results in $env:ArtifactsBuildFolder"
#      exit 0
#    workingDirectory: $(System.DefaultWorkingDirectory)
#  displayName: 'Evaluate Test Results'
#  continueOnError: true

#- task: PublishTestResults@2
#  displayName: 'Publish Test Results'
#  inputs:
#    testResultsFiles: '$(ArtifactsBuildFolder)\junit-result.xml'
#    mergeTestResults: true
#    failTaskOnFailedTests: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      New-Item -Force -Path "$env:ArtifactsBuildFolder\deployment_data" -Name "ApplicationScope.cache" -ItemType "file" -Value "$(ApplicationScope)"
      Write-Host "Wrote ApplicationScope to $env:ArtifactsBuildFolder\deployment_data\ApplicationScope.cache"
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Write ApplicationScope to File'
  continueOnError: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deployment_manifest'
  inputs:
    PathtoPublish: $(ArtifactsBuildFolder)\deployment_data
    ArtifactName: $(ArtifactName)

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $env:ArtifactsBuildFolder = "${{ parameters.ArtifactsBuildFolder }}"
      Write-Host "Stashing the *.cache generated in the pipeline logs"
      $cache_files = Get-ChildItem -Path "$env:ArtifactsBuildFolder\*.cache" -Recurse
      foreach ($cfile in $cache_files) {
        Write-Host "Stashing $cfile"
        Write-Output "##vso[task.uploadfile]$cfile"
      }
    workingDirectory: $(System.DefaultWorkingDirectory)
    condition: always()
  displayName: 'Stash generated *.cache files into pipeline logs'
