# ******************************************************************
# Declare parameters
# ******************************************************************
parameters:
- name: TriggerManifest
  displayName: Trigger Manifest
  type: string
  default: ''
- name: TriggeredBy
  displayName: Triggered By
  type: string
  default: ''
- name: ApplicationScope
  displayName: Application Scope
  type: string
  default: ''
- name: ApplicationScopeWithTests
  displayName: Application Scope With Tests
  type: string
  default: ''
- name: OSPackageVersion
  displayName: OS Package Version
  type: string
  default: '0.9.0'  # Use an available version
- name: LifeTimeHostname
  displayName: LifeTime Hostname
  type: string
  default: 'https://outsystems.lt.askblue.pt/'
- name: LifeTimeServiceAccountToken
  displayName: LifeTime Service Account Token
  type: string
  default: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJsaWZldGltZSIsInN1YiI6Ik1HWTJPR1EyTnprdE5qSmpPQzAwT0RVNUxXRXlNRFV0TW1ZeE1EVXdaVEkxT0RVeSIsImF1ZCI6ImxpZmV0aW1lIiwiaWF0IjoiMTcxOTI1NTM2MiIsImppdCI6IkJ1WEMyV213cEQifQ==.hffnxY6A1sZFuCzqTszJIlUki/RLJDxLLVOhSM31ZIQ='
- name: LifeTimeAPIVersion
  displayName: LifeTime API Version
  type: string
  default: '2'
- name: DevelopmentEnvironment
  displayName: Development Environment
  type: string
  default: 'Development'
- name: RegressionEnvironment
  displayName: Regression Environment
  type: string
  default: 'QualityAssurance#1'
- name: ProbeEnvironmentURL
  displayName: Probe Environment URL
  type: string
  default: 'https://outsystems.dev.askblue.pt/'
- name: ArtifactName
  displayName: Artifact Name
  type: string
  default: 'deployment_manifest'
- name: ArtifactsBuildFolder
  displayName: Artifacts Build Folder
  type: string
  default: 'artifacts'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Create $(ArtifactsBuildFolder) directory on $(System.DefaultWorkingDirectory)"
      mkdir "$(ArtifactsBuildFolder)" -Force
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Create Artifacts Folder'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: pip install -U outsystems-pipeline==$(OSPackageVersion)
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Install OutSystems Pipeline Package'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Integration with AI Mentor Studio
      python -m ai_mentor_studio.integration --artifacts "$(ArtifactsBuildFolder)" --url $(AIMentorStudioURL) --token $(AIMentorStudioToken)
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Integrate with AI Mentor Studio'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: python -m outsystems.pipeline.fetch_lifetime_data --artifacts "$(ArtifactsBuildFolder)" --lt_url  $(LifeTimeHostname) --lt_token $(LifeTimeServiceAccountToken) --lt_api_version $(LifeTimeAPIVersion)
  displayName: 'Fetch Lifetime Data'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Check for security findings
      $securityFindings = python -m outsystems.pipeline.check_security_findings --artifacts "$(ArtifactsBuildFolder)"
      if ($securityFindings -ne 0) {
        Write-Host "Security findings detected, stopping the deployment."
        exit 1
      }
    workingDirectory: $(System.DefaultWorkingDirectory)
  displayName: 'Check for Security Findings'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: python -m outsystems.pipeline.deploy_latest_tags_to_target_env --artifacts "$(ArtifactsBuildFolder)" --lt_url $(LifeTimeHostname) --lt_token $(LifeTimeServiceAccountToken) --lt_api_version $(LifeTimeAPIVersion) --source_env $(DevelopmentEnvironment) --destination_env $(RegressionEnvironment) --app_list "$(ApplicationScopeWithTests)"
  displayName: 'Deploy to CI Environment'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: python -m outsystems.pipeline.generate_unit_testing_assembly --artifacts "$(ArtifactsBuildFolder)" --app_list "$(ApplicationScopeWithTests)" --cicd_probe_env $(ProbeEnvironmentURL) --bdd_framework_env $(BddEnvironmentURL)
  displayName: 'Generate URLs for BDD testing'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      python -m outsystems.pipeline.evaluate_test_results --artifacts "$(ArtifactsBuildFolder)"
      exit 0
  displayName: 'Evaluate Test Results'
  continueOnError: true

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: '$(ArtifactsBuildFolder)\junit-result.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: New-Item -Force -Path "$(ArtifactsBuildFolder)\deployment_data" -Name "ApplicationScope.cache" -ItemType "file" -Value "$(ApplicationScope)"
  displayName: 'Write ApplicationScope to File'
  continueOnError: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: deployment_manifest'
  inputs:
    PathtoPublish: $(ArtifactsBuildFolder)\deployment_data
    ArtifactName: $(ArtifactName)

- powershell: |
    Write-Host "Stashing the *.cache generated in the pipeline logs"
    $cache_files = Get-ChildItem -Path "$(ArtifactsBuildFolder)\*.cache" -Recurse
    foreach ($cfile in $cache_files) {
      Write-Host "Stashing $cfile"
      Write-Output "##vso[task.uploadfile]$cfile"
    }
  condition: always()
  displayName: 'Stash generated *.cache files into pipeline logs'
...